# ============================================================================
# Black Swan RSS Feed Service - Environment Configuration
# ============================================================================
# 
# This file contains example environment variables for the BlackSwan RSS Feed Service.
# Copy this file to .env and fill in your actual values.
# 
# IMPORTANT SECURITY NOTES:
# - Never commit the actual .env file to version control
# - Keep your API keys secure and never share them publicly
# - Use different keys for development and production environments
# - Regularly rotate your API keys for security
#
# ============================================================================

# ============================================================================
# EXTERNAL API CONFIGURATION
# ============================================================================

# OpenRouter API Key for Perplexity AI Integration
# Required for article analysis and market impact classification
# Get your API key from: https://openrouter.ai/
# Example: sk-or-v1-1234567890abcdef1234567890abcdef1234567890abcdef
OPENROUTER_API_KEY=your_openrouter_api_key_here

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Server Port (Optional)
# Default: 8087
# The port on which the RSS service will listen for HTTP requests
# Example: 8087, 3000, 5000
PORT=8087

# Node Environment (Optional)
# Default: development
# Set to 'production' for production deployments
# Example: development, production, staging
NODE_ENV=development

# ============================================================================
# FIREBASE CONFIGURATION
# ============================================================================
# 
# Firebase configuration is handled via the serviceAccountKey.json file
# which should be placed in the root directory of the project.
# 
# To set up Firebase:
# 1. Go to https://console.firebase.google.com/
# 2. Create a new project or select existing project
# 3. Enable Firestore Database
# 4. Go to Project Settings â†’ Service Accounts
# 5. Click "Generate new private key"
# 6. Save the JSON file as 'serviceAccountKey.json' in the project root
# 7. Ensure the service account has Firestore read/write permissions
#
# The serviceAccountKey.json file should contain:
# {
#   "type": "service_account",
#   "project_id": "your-project-id",
#   "private_key_id": "your-private-key-id",
#   "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
#   "client_email": "firebase-adminsdk-xxxxx@your-project-id.iam.gserviceaccount.com",
#   "client_id": "your-client-id",
#   "auth_uri": "https://accounts.google.com/o/oauth2/auth",
#   "token_uri": "https://oauth2.googleapis.com/token",
#   "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
#   "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-xxxxx%40your-project-id.iam.gserviceaccount.com"
# }

# ============================================================================
# RSS FEED CONFIGURATION
# ============================================================================
# 
# RSS feed URLs are configured in the main application code (index.js)
# The following feeds are monitored by default:
# - Reuters (via Google News RSS)
# - Associated Press (via Google News RSS)  
# - CoinDesk (direct RSS feed)
# - CoinTelegraph (direct RSS feed)
#
# To modify RSS feeds, edit the CONFIG.RSS_FEEDS array in index.js

# ============================================================================
# MONITORING CONFIGURATION
# ============================================================================
# 
# Monitoring schedule and processing settings are configured in the main
# application code (index.js). Default settings:
# - Monitoring interval: Every 5 minutes
# - Chunk size: 10 articles per batch
# - API timeout: 30 seconds
#
# To modify these settings, edit the CONFIG object in index.js

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================
# 
# Logging is handled automatically by the service with the following features:
# - Real-time log streaming via Server-Sent Events (SSE)
# - Log levels: INFO, LOG, WARN, ERROR, DEBUG
# - Rolling buffer with 1000 entry limit
# - Automatic client connection management
#
# Log streaming endpoint: GET /logs/stream

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
# 
# Security features are automatically enabled:
# - Rate limiting: 100 requests per 15 minutes per IP
# - CORS: Cross-origin resource sharing enabled
# - Helmet: Security headers protection
# - Input validation and sanitization
#
# For production deployments, consider:
# - Using HTTPS with SSL certificates
# - Implementing additional authentication if needed
# - Setting up proper firewall rules
# - Using environment-specific API keys

# ============================================================================
# PRODUCTION DEPLOYMENT NOTES
# ============================================================================
# 
# For production deployment:
# 1. Set NODE_ENV=production
# 2. Use production-grade API keys
# 3. Set up proper process management (PM2, Docker, etc.)
# 4. Configure reverse proxy (Nginx, Apache)
# 5. Set up monitoring and alerting
# 6. Implement log rotation and retention policies
# 7. Set up automated backups for Firestore data
# 8. Configure SSL/TLS certificates
# 9. Set up health checks and uptime monitoring
# 10. Implement proper error tracking and reporting

# ============================================================================
# DEVELOPMENT NOTES
# ============================================================================
# 
# For development:
# 1. Use development API keys with limited quotas
# 2. Set NODE_ENV=development for detailed logging
# 3. Use nodemon for automatic restarts: npm run dev
# 4. Test with manual monitoring triggers: POST /api/monitor/trigger
# 5. Monitor logs via: GET /logs/stream
# 6. Check service health via: GET /health
# 7. View statistics via: GET /api/stats

# ============================================================================
# TROUBLESHOOTING
# ============================================================================
# 
# Common issues and solutions:
# 
# 1. Service won't start:
#    - Check Node.js version (requires 18.0.0+)
#    - Verify all dependencies are installed: npm install
#    - Check if port is already in use
#    - Verify environment variables are set correctly
#
# 2. RSS feed fetching fails:
#    - Check network connectivity
#    - Verify RSS feed URLs are accessible
#    - Check firewall settings (outbound HTTPS port 443)
#    - Monitor logs for specific error messages
#
# 3. Firebase connection issues:
#    - Verify serviceAccountKey.json exists and is valid
#    - Check Firestore is enabled in Firebase console
#    - Ensure service account has proper permissions
#    - Verify project ID matches in service account key
#
# 4. API rate limiting:
#    - Check OpenRouter API key is valid
#    - Monitor API usage in OpenRouter dashboard
#    - Verify API key has sufficient credits/quota
#    - Check for API key expiration
#
# 5. Performance issues:
#    - Monitor memory usage and CPU utilization
#    - Check network latency to external services
#    - Review Firestore query performance
#    - Consider increasing server resources
#
# For additional support, check the README.md file or create an issue
# in the repository.

# ============================================================================
# END OF CONFIGURATION
# ============================================================================
